name: Selenium Grid CI

on:
  workflow_dispatch:   # allow manual runs from the Actions tab
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Start a temporary Selenium Grid for this job
    services:
      selenium-hub:
        image: selenium/hub:4.23.0
        ports:
          - 4444:4444
        options: >-
          --health-cmd="curl -s http://localhost:4444/status | jq -r .value.ready | grep true || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=30

      chrome:
        image: selenium/node-chrome:4.23.0
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: 'true'
        options: --shm-size="2g"

      firefox:
        image: selenium/node-firefox:4.23.0
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: 'true'
        options: --shm-size="2g"

    strategy:
      fail-fast: false
      matrix:
        browser: [ chrome, firefox ]

    env:
      # Your factory reads these:
      RUN_TARGET: remote
      GRID_URL: http://localhost:4444      # <- in Actions, talk to services via localhost
      BROWSER: ${{ matrix.browser }}
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # jq is usually preinstalled, but this makes the job robust
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      # Wait until hub is ready AND at least one free slot exists for the current browser
      - name: Wait for Selenium Grid (hub + slots)
        run: |
          set -e
          echo "Waiting for hub readiness..."
          for i in {1..60}; do
            READY=$(curl -s http://localhost:4444/status | jq -r '.value.ready')
            if [ "$READY" = "true" ]; then
              echo "Hub is ready"
              break
            fi
            echo "Hub not ready yet..."; sleep 2
            if [ $i -eq 60 ]; then echo "Hub never became ready"; exit 1; fi
          done

          echo "Waiting for an available '${BROWSER}' slot..."
          for i in {1..90}; do
            AVAILABLE=$(curl -s http://localhost:4444/se/grid/distributor/status \
              | jq "[.distributor.status.nodes[].slots[]
                     | select(.stereotype.\"browserName\"==\"${BROWSER}\" and .session==null)] | length")
            if [ "$AVAILABLE" -ge 1 ]; then
              echo "Found ${AVAILABLE} free '${BROWSER}' slot(s)."
              exit 0
            fi
            echo "No free '${BROWSER}' slot yet..."; sleep 2
          done
          echo "Timed out waiting for a free '${BROWSER}' slot"; exit 1

      - name: Run tests
        run: |
          mkdir -p TestResults Screenshots
          dotnet test --configuration Release --no-build \
            --logger "trx;LogFileName=TestResults_${{ matrix.browser }}.trx"
          # If you use runsettings:
          # dotnet test --configuration Release --no-build \
          #   --settings tests.runsettings \
          #   --logger "trx;LogFileName=TestResults_${{ matrix.browser }}.trx"

      - name: Upload test artifacts (TRX + screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.browser }}
          path: |
            **/TestResults_*.trx
            **/Screenshots/**
          if-no-files-found: ignore
