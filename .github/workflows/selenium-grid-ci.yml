name: Selenium Grid CI

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      selenium-hub:
        image: selenium/hub:4.23.0
        ports:
          - 4444:4444
        # no healthcheck here

      chrome:
        image: selenium/node-chrome:4.23.0
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: 'true'
        options: --shm-size="2g"

      firefox:
        image: selenium/node-firefox:4.23.0
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: 'true'
        options: --shm-size="2g"

    strategy:
      fail-fast: false
      matrix:
        browser: [ chrome, firefox ]

    env:
      RUN_TARGET: remote
      GRID_URL: http://localhost:4444
      BROWSER: ${{ matrix.browser }}
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # ---- Wait for Grid (no container healthcheck) ----
      - name: Wait for hub HTTP
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:4444/status >/dev/null; then
              echo "Hub HTTP reachable"; exit 0
            fi
            echo "Waiting for hub HTTP... ($i)"; sleep 2
          done
          echo "Hub never became reachable"; exit 1

      - name: Wait for hub ready flag
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:4444/status | grep -q '"ready":true'; then
              echo "Hub is ready"; exit 0
            fi
            echo "Waiting for hub ready... ($i)"; sleep 2
          done
          echo "Hub never reported ready"; exit 1

      - name: Wait for nodes to register
        run: |
          for i in {1..120}; do
            NODES=$(curl -fsS http://localhost:4444/se/grid/distributor/status \
              | jq -r '((.distributor.status.nodes // []) | length)')
            if [ "${NODES:-0}" -ge 1 ]; then
              echo "Nodes registered: $NODES"; exit 0
            fi
            echo "Waiting for nodes... ($i)"; sleep 2
          done
          echo "Nodes never registered"; exit 1

      - name: Wait for a free '${{ matrix.browser }}' slot
        run: |
          for i in {1..120}; do
            FREE=$(curl -fsS http://localhost:4444/se/grid/distributor/status \
              | jq -r --arg b "${BROWSER}" '
                  [
                    (.distributor.status.nodes // [])[]? |
                    (.slots // [])[]? |
                    select((.stereotype.browserName // "") == $b and (.session // null) == null)
                  ] | length
                ')
            if [ "${FREE:-0}" -ge 1 ]; then
              echo "Free ${BROWSER} slots: $FREE"; exit 0
            fi
            echo "Waiting for free ${BROWSER} slot... ($i)"; sleep 2
          done
          echo "No free ${BROWSER} slot"; exit 1

      # ---- Run tests ----
      - name: Run tests
        run: |
          mkdir -p TestResults Screenshots
          dotnet test --configuration Release --no-build \
            --logger "trx;LogFileName=TestResults_${{ matrix.browser }}.trx"

      - name: Upload test artifacts (TRX + screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.browser }}
          path: |
            **/TestResults_*.trx
            **/Screenshots/**
          if-no-files-found: ignore

      # Helpful logs if anything misbehaves
      - name: Debug containers (docker ps + logs)
        if: failure() || always()
        run: |
          docker ps -a
          echo '=== Hub logs ==='
          docker logs $(docker ps -aq --filter "ancestor=selenium/hub:4.23.0") || true
          echo '=== Chrome logs ==='
          docker logs $(docker ps -aq --filter "ancestor=selenium/node-chrome:4.23.0") || true
          echo '=== Firefox logs ==='
          docker logs $(docker ps -aq --filter "ancestor=selenium/node-firefox:4.23.0") || true
